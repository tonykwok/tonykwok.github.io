{"version":3,"sources":["webpack:///./src/components/pagination.js","webpack:///./src/styles/pagination.module.css","webpack:///./src/templates/categories.js"],"names":["Pagination","nextPath","previousPath","nextLabel","previousLabel","className","style","pagination","to","rel","item","iconPrev","itemText","itemRight","iconNext","module","exports","_","require","Categories","propName","data","pageContext","nextPagePath","previousPagePath","humanPageNumber","numberOfPages","category","siteAuthor","site","siteMetadata","author","taxonomyYaml","taxonomyName","name","taxonomyExcerpt","excerpt","taxonomyHtml","html","allMarkdownRemark","group","posts","edges","paginationTitle","metaImage","image","title","path","slugify","description","id","main","heading","intro","dangerouslySetInnerHTML","__html","content","subHeading","columnList","marginBottom","sort","a","b","toLowerCase","map","tag","key","fieldValue","count","totalCount","list","node","autoExcerpt","timeToRead","frontmatter","date","date_pretty","datePretty"],"mappings":"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","file":"component---src-templates-categories-js-082838275a8ab8847f9b.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport style from '../styles/pagination.module.css'\n\nconst Pagination = ({ nextPath, previousPath, nextLabel, previousLabel }) =>\n  previousPath || nextPath ? (\n    <nav className={style.pagination}>\n      {previousPath ? (\n        <Link to={previousPath} rel=\"prev\" className={style.item}>\n          <span className={style.iconPrev}>←</span>\n          <span className={style.itemText}>{previousLabel}</span>\n        </Link>\n      ) : (\n        <div className={style.item} />\n      )}\n      {nextPath ? (\n        <Link\n          to={nextPath}\n          rel=\"next\"\n          className={`${style.item} ${style.itemRight}`}\n        >\n          <span className={style.itemText}>{nextLabel}</span>\n          <span className={style.iconNext}>→</span>\n        </Link>\n      ) : (\n        <div className={style.item} />\n      )}\n    </nav>\n  ) : null\n\nPagination.propTypes = {\n  nextPath: PropTypes.string,\n  previousPath: PropTypes.string,\n  nextLabel: PropTypes.string,\n  previousLabel: PropTypes.string,\n}\n\nexport default Pagination\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"pagination-module--pagination--5u0we\",\"item\":\"pagination-module--item--2FbSP\",\"itemText\":\"pagination-module--itemText--q_ljE\",\"itemRight\":\"pagination-module--itemRight--2XC01\",\"itemLabel\":\"pagination-module--itemLabel--1yC7K\",\"iconNext\":\"pagination-module--iconNext--2kIia\",\"iconPrev\":\"pagination-module--iconPrev--1xG44\",\"customMedia\":{},\"customProperties\":{},\"customSelectors\":{}};","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Entry from '../components/entry'\nimport Pagination from '../components/pagination'\n\nimport site from '../../config/site'\n\nimport style from '../styles/archive.module.css'\n\nconst _ = require('lodash-addons')\n\nconst Categories = ({\n  data,\n  pageContext: {\n    nextPagePath,\n    previousPagePath,\n    humanPageNumber,\n    numberOfPages,\n    category,\n  },\n}) => {\n  const {\n    site: {\n      siteMetadata: { author: siteAuthor },\n    },\n    taxonomyYaml: {\n      name: taxonomyName,\n      excerpt: taxonomyExcerpt,\n      html: taxonomyHtml,\n    },\n    allMarkdownRemark: { group, edges: posts },\n  } = data\n  const paginationTitle =\n    humanPageNumber === 1\n      ? ''\n      : ` - Page ${humanPageNumber} of ${numberOfPages}`\n  const metaImage = site.image\n\n  // Sort object alphabetically function\n  const propComparator = (propName) => (a, b) =>\n    a[propName].toLowerCase() === b[propName].toLowerCase()\n      ? 0\n      : a[propName].toLowerCase() < b[propName].toLowerCase()\n      ? -1\n      : 1\n\n  return (\n    <Layout>\n      <SEO\n        title={`${taxonomyName}${paginationTitle} - ${site.title}`}\n        path={`/${_.slugify(category)}/`}\n        description={\n          taxonomyExcerpt || `An archive of posts related to ${taxonomyName}.`\n        }\n        metaImage={metaImage}\n      />\n      <main id=\"main\" className={style.main}>\n        <div className={style.title}>\n          <h1 className={style.heading}>\n            <span>\n              {taxonomyName} {paginationTitle}\n            </span>\n          </h1>\n          {taxonomyHtml && humanPageNumber === 1 && (\n            <div\n              className={style.intro}\n              dangerouslySetInnerHTML={{ __html: taxonomyHtml }}\n            />\n          )}\n        </div>\n        <div className={style.content}>\n          <h2 className={style.subHeading}>\n            <span>Browse by topic</span>\n          </h2>\n          <div className={style.columnList} style={{ marginBottom: '3rem' }}>\n            <ul>\n              {group.sort(propComparator(`fieldValue`)).map((tag) => (\n                <li key={tag.fieldValue}>\n                  <Link to={`/tag/${_.slugify(tag.fieldValue)}/`}>\n                    <strong>{tag.fieldValue}</strong>{' '}\n                    <span className={style.count}>{tag.totalCount}</span>\n                  </Link>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className={style.list}>\n            {posts.map(({ node }) => {\n              const {\n                id,\n                excerpt: autoExcerpt,\n                timeToRead,\n                frontmatter: {\n                  title,\n                  date,\n                  date_pretty,\n                  path,\n                  author,\n                  image,\n                  excerpt,\n                },\n              } = node\n\n              return (\n                <Entry\n                  key={id}\n                  title={title}\n                  date={date}\n                  datePretty={date_pretty}\n                  path={path}\n                  author={author || siteAuthor}\n                  timeToRead={timeToRead}\n                  image={image}\n                  excerpt={excerpt || autoExcerpt}\n                />\n              )\n            })}\n          </div>\n        </div>\n      </main>\n      <Pagination\n        previousPath={previousPagePath}\n        previousLabel=\"Newer posts\"\n        nextPath={nextPagePath}\n        nextLabel=\"Older posts\"\n      />\n    </Layout>\n  )\n}\n\nCategories.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    category: PropTypes.string,\n    nextPagePath: PropTypes.string,\n    previousPagePath: PropTypes.string,\n    humanPageNumber: PropTypes.number,\n    numberOfPages: PropTypes.number,\n  }),\n}\n\nexport const postsQuery = graphql`\n  query($limit: Int!, $skip: Int!, $category: String!) {\n    site {\n      siteMetadata {\n        author {\n          name\n          url\n        }\n      }\n    }\n    taxonomyYaml(id: { eq: $category }) {\n      id\n      name\n      excerpt\n      html\n    }\n    allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          categories: { in: [$category] }\n          published: { ne: false }\n        }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      edges {\n        node {\n          id\n          excerpt(format: HTML)\n          timeToRead\n          frontmatter {\n            title\n            date\n            date_pretty: date(formatString: \"MMMM Do, YYYY\")\n            date_from_now: date(fromNow: true)\n            path\n            author\n            excerpt\n            categories\n            image {\n              childImageSharp {\n                fluid(maxWidth: 760, quality: 75) {\n                  ...GatsbyImageSharpFluid_noBase64\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Categories\n"],"sourceRoot":""}
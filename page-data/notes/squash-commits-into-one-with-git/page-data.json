{
  "componentChunkName": "component---src-templates-post-js",
  "path": "/notes/squash-commits-into-one-with-git/",
  "result": {
    "data": {
      "markdownRemark": {
        "frontmatter": {
          "title": "Squash commits into one with Git",
          "authors": [{ "id": "triangles", "name": "Triangles" }],
          "date": "2020-07-16T00:00:00.000Z",
          "date_pretty": "July 16th, 2020",
          "date_from_now": "2 years ago",
          "last_modified_at": null,
          "last_modified_at_from_now": null,
          "path": "/notes/squash-commits-into-one-with-git/",
          "author": null,
          "excerpt": "A nice way to group some changes together, especially before sharing them with others.",
          "tags": ["Git"],
          "image": {
            "childImageSharp": {
              "fluid": {
                "aspectRatio": 1.7741935483870968,
                "src": "/static/846ec3be36827113b49d2bd227433386/c4e4c/git-tips-and-tricks.png",
                "srcSet": "/static/846ec3be36827113b49d2bd227433386/4af1b/git-tips-and-tricks.png 275w,\n/static/846ec3be36827113b49d2bd227433386/25aaf/git-tips-and-tricks.png 550w,\n/static/846ec3be36827113b49d2bd227433386/c4e4c/git-tips-and-tricks.png 1100w,\n/static/846ec3be36827113b49d2bd227433386/e2e50/git-tips-and-tricks.png 1650w,\n/static/846ec3be36827113b49d2bd227433386/4ce6a/git-tips-and-tricks.png 1920w",
                "sizes": "(max-width: 1100px) 100vw, 1100px"
              },
              "fixed": {
                "src": "/static/846ec3be36827113b49d2bd227433386/c4e4c/git-tips-and-tricks.png",
                "height": 619,
                "width": 1100
              }
            }
          },
          "toc": false,
          "comments": false,
          "comments_locked": true,
          "hide_meta": null
        },
        "id": "e6be9c63-d31f-59e5-889b-47b64ab0122d",
        "html": "<p><em>Original published at <a href=\"https://www.internalpointers.com/post/squash-commits-into-one-git\">https://www.internalpointers.com/post/squash-commits-into-one-git</a></em></p>\n<p>In Git you can merge several commits into one with the powerful interactive rebase. It’s a handy tool I use quite often; I usually tidy up my working space by grouping together several small intermediate commits into a single lump to push upstream.</p>\n<h2 id=\"step-1-choose-your-starting-commit\" style=\"position:relative;\"><a href=\"#step-1-choose-your-starting-commit\" aria-label=\"step 1 choose your starting commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: choose your starting commit</h2>\n<p>The first thing to do is to invoke git to start an interactive rebase session:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git rebase --interactive HEAD~N</code></pre></div>\n<p>Or, shorter:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git rebase -i HEAD~N</code></pre></div>\n<p>where <code class=\"language-text\">N</code> is the number of commits you want to join, <em>starting from the most recent one</em>. For example, this is a hypothetical list of commits taken from the <code class=\"language-text\">git log</code> command, while I’m working on a generic feature Z:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">871adf OK, feature Z is fully implemented      --- newer commit\n0c3317 Whoops, not yet...\n87871a I&#39;m ready!\n643d0e Code cleanup\nafb581 Fix this and that\n4e9baa Cool implementation\nd94e78 Prepare the workbench for feature Z\n6394dc Feature Y                               --- older commit</code></pre></div>\n<p>And this is what I would like to do:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">871adf OK, feature Z is fully implemented      --- newer commit --┐\n0c3317 Whoops, not yet...                                         |\n87871a I&#39;m ready!                                                 |\n643d0e Code cleanup                                               |-- Join these into one\nafb581 Fix this and that                                          |\n4e9baa Cool implementation                                        |\nd94e78 Prepare the workbench for feature Z     -------------------┘\n6394dc Feature Y                               --- older commit</code></pre></div>\n<p>Obtaining:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">84d1f8 Feature Z                               --- newer commit (result of rebase)\n6394dc Feature Y                               --- older commit</code></pre></div>\n<p>Notice how a rebase generates a new commit with a new hash (<code class=\"language-text\">84d1f8</code> in the example above). So in this case the command would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git rebase --interactive HEAD~[7]</code></pre></div>\n<p>because I want to combine the last seven commits into one, and <code class=\"language-text\">d94e78 Prepare the workbench for feature Z</code> is the seventh one.</p>\n<h3 id=\"i-have-tons-of-commits-to-squash-do-i-have-to-count-them-one-by-one\" style=\"position:relative;\"><a href=\"#i-have-tons-of-commits-to-squash-do-i-have-to-count-them-one-by-one\" aria-label=\"i have tons of commits to squash do i have to count them one by one permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I have tons of commits to squash, do I have to count them one by one?</h3>\n<p>A downside of the <code class=\"language-text\">git rebase --interactive HEAD~[N]</code> command is that you have to guess the exact number of commits, by counting them one by one. Luckily, there is another way:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git rebase --interactive [commit-hash]</code></pre></div>\n<p>Where <code class=\"language-text\">[commit-hash]</code> is the hash of <em>the commit just before the first one you want to rewrite from</em>. So in my example the command would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git rebase --interactive 6394dc</code></pre></div>\n<p>Where <code class=\"language-text\">6394dc</code> is <code class=\"language-text\">Feature Y</code>. You can read the whole thing as:</p>\n<p><em>Merge all my commits on top of commit <code class=\"language-text\">[commit-hash]</code>.</em></p>\n<p>Way easier, isn’t it?</p>\n<h2 id=\"step-2-picking-and-squashing\" style=\"position:relative;\"><a href=\"#step-2-picking-and-squashing\" aria-label=\"step 2 picking and squashing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: picking and squashing</h2>\n<p>At this point your editor of choice will pop up, showing the list of commits you want to merge. Note that it might be confusing at first, since they are displayed in a reverse order, where the older commit is on top. I’ve added <code class=\"language-text\">--- older commit</code> and <code class=\"language-text\">--- newer commit</code> to make it clear, you won’t find those notes in the editor.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pick d94e78 Prepare the workbench for feature Z     --- older commit\npick 4e9baa Cool implementation \npick afb581 Fix this and that  \npick 643d0e Code cleanup\npick 87871a I&#39;m ready! \npick 0c3317 Whoops, not yet... \npick 871adf OK, feature Z is fully implemented      --- newer commit\n\n[...]</code></pre></div>\n<p>Below the commit list there is a short comment (omitted in my example) which outlines all the operations available. You can do many smart tricks during an interactive rebase, let’s stick with the basics for now though. Our task here is to mark all the commits as <strong>squashable</strong>, <em>except the first/older one</em>: it will be used as a starting point.</p>\n<p>You mark a commit as squashable by changing the word pick into squash next to it (or s for brevity, as stated in the comments). The result would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pick d94e78 Prepare the workbench for feature Z     --- older commit\ns 4e9baa Cool implementation \ns afb581 Fix this and that  \ns 643d0e Code cleanup\ns 87871a I&#39;m ready! \ns 0c3317 Whoops, not yet... \ns 871adf OK, feature Z is fully implemented      --- newer commit\n\n[...]</code></pre></div>\n<p>Save the file and close the editor.</p>\n<h2 id=\"step-3-create-the-new-commit\" style=\"position:relative;\"><a href=\"#step-3-create-the-new-commit\" aria-label=\"step 3 create the new commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Create the new commit</h2>\n<p>You have just told Git to combine all seven commits into the the first commit in the list. It’s now time to give it a name: your editor pops up again with a default message, made of the names of all the commits you have squashed.</p>\n<p>You can leave it as it is and the commit message will result in a list of all the intermediate commits, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Prepare the workbench for feature Z\nCool implementation \nFix this and that  \nCode cleanup\nI&#39;m ready! \nWhoops, not yet... \nOK, feature Z is fully implemented</code></pre></div>\n<p>Usually I don’t care to keep such information, so I wipe out the default message and use something more self-explanatory like <code class=\"language-text\">Implemented feature Z</code>.</p>\n<h3 id=\"sources\" style=\"position:relative;\"><a href=\"#sources\" aria-label=\"sources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sources</h3>\n<ul>\n<li>Stackoverflow - <a href=\"https://stackoverflow.com/questions/41464752/git-rebase-interactive-the-last-n-commits\">Git rebase interactive the last n commits</a></li>\n<li>Stackoverflow - <a href=\"https://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one\">How can I merge two commits into one?</a></li>\n<li>Gitready - <a href=\"http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\">Squashing commits with rebase</a></li>\n</ul>",
        "excerpt": "Original published at https://www.internalpointers.com/post/squash-commits-into-one-git In Git you can merge several commits into one with…",
        "timeToRead": 4,
        "tableOfContents": "<ul>\n<li>\n<p><a href=\"/notes/squash-commits-into-one-with-git/#step-1-choose-your-starting-commit\">Step 1: choose your starting commit</a></p>\n<ul>\n<li><a href=\"/notes/squash-commits-into-one-with-git/#i-have-tons-of-commits-to-squash-do-i-have-to-count-them-one-by-one\">I have tons of commits to squash, do I have to count them one by one?</a></li>\n</ul>\n</li>\n<li><a href=\"/notes/squash-commits-into-one-with-git/#step-2-picking-and-squashing\">Step 2: picking and squashing</a></li>\n<li>\n<p><a href=\"/notes/squash-commits-into-one-with-git/#step-3-create-the-new-commit\">Step 3: Create the new commit</a></p>\n<ul>\n<li><a href=\"/notes/squash-commits-into-one-with-git/#sources\">Sources</a></li>\n</ul>\n</li>\n</ul>"
      },
      "comments": { "edges": [] }
    },
    "pageContext": {
      "next": {
        "frontmatter": {
          "path": "/notes/how-to-remove-a-submodule-in-git/",
          "title": "How to Remove a Submodule in Git",
          "authors": [{ "id": "tonykwok", "name": "Tony Guo" }],
          "categories": ["notes"],
          "tags": ["Git"]
        },
        "fileAbsolutePath": "/home/28041/opensource/github.com/tonykwok/made-mistakes-gatsby/src/posts/notes/how-to-remove-a-submodule-in-git.md"
      },
      "previous": {
        "frontmatter": {
          "path": "/work/2-little-rosebuds/",
          "title": "2 Little Rosebuds",
          "authors": [{ "id": "mmistakes", "name": "Michael Rose" }],
          "categories": ["work"],
          "tags": ["design", "web development"]
        },
        "fileAbsolutePath": "/home/28041/opensource/github.com/tonykwok/made-mistakes-gatsby/src/posts/work/2-little-rosebuds.md"
      }
    }
  },
  "staticQueryHashes": ["215131063", "3443189517"]
}

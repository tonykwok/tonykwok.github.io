<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:webfeeds="http://webfeeds.org/rss/1.0"><channel><title><![CDATA[Reisen]]></title><description><![CDATA[Things I've Found on the Way Getting There]]></description><link>http://github.com/dylang/node-rss</link><generator>RSS for Node</generator><lastBuildDate>Tue, 08 Feb 2022 07:17:30 GMT</lastBuildDate><webfeeds:logo>https://kwapoong.github.io/images/made-mistakes-logo.png</webfeeds:logo><webfeeds:icon>https://kwapoong.github.io/images/made-mistakes-logo.png</webfeeds:icon><webfeeds:accentColor>000000</webfeeds:accentColor><item><title><![CDATA[How about some Android graphics true facts? (Part 2 of 2)]]></title><description><![CDATA[A fantastic Google+ post by Dianne Hackborn (framework engineer on Android) explained the ins and outs of Android's hardware acceleration.]]></description><link>https://kwapoong.github.io/articles/android-graphics-true-facts-2/</link><guid isPermaLink="false">https://kwapoong.github.io/articles/android-graphics-true-facts-2/</guid><pubDate>Thu, 16 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/4e922c5dabc4c979d3900335c978fad7/fc20c/android-logo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Original published at &lt;a href=&quot;https://plus.google.com/u/0/105051985738280261832/posts/XAZ4CeVP6DC&quot;&gt;https://plus.google.com/u/0/105051985738280261832/posts/XAZ4CeVP6DC&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A few days ago I wrote a post trying to correct a lot of the inaccurate statements I have seen repeatedly mentioned about how graphics on Android works. This resulted in a lot of nice discussion, but unfortunately has also lead some people to come up with new, novel, and often technically inaccurate complaints about how Android works.&lt;/p&gt;
&lt;p&gt;These new topics have been more about some fundamental design decisions in Android, and why they are wrong. I‚Äôd like to help people better understand (and judge) these discussions by giving some real background on why Android‚Äôs UI was designed the way it is and how it actually works.&lt;/p&gt;
&lt;p&gt;One issue that has been raised is that Android doesn‚Äôt use thread priorities to reduce how much background work interrupts the user interface. This is outright wrong. It actually uses a number of priorities, which you can even find defined right here &lt;a href=&quot;http://developer.android.com/reference/android/os/Process.html#THREAD_PRIORITY_AUDIO&quot;&gt;http://developer.android.com/reference/android/os/Process.html#THREAD_PRIORITY_AUDIO&lt;/a&gt; in the SDK.&lt;/p&gt;
&lt;p&gt;The most important of these are the background and default priorities. User interface threads normally run at the default priority; background threads run in the background priority. Application processes that are in the background have all of their threads forced to the background priority.&lt;/p&gt;
&lt;p&gt;Android‚Äôs background priority is actually pretty interesting. It uses a Linux facility called cgroups to put all background threads into a special scheduling group which, all together, can‚Äôt use more than 10% of the CPU. That is, if you have 10 processes in the background all trying to run at the same time, when combined they can‚Äôt take away more than 10% of the time needed by foreground threads. This is enough to allow background threads to make some forward progress, without having enough of an impact on the foreground threads to be generally visible to the user.&lt;/p&gt;
&lt;p&gt;(You may have noticed that a ‚Äúforeground‚Äù priority is also defined. This is not used in current Android; it was in the original implementation, but we found that the Linux scheduler does not give enough preference to threads based on pure priority, so switched to cgroups in Android 1.6.)&lt;/p&gt;
&lt;p&gt;I have also seen a number of claims that the basic Android design is fundamentally flawed and archaic because it doesn‚Äôt use a rendering thread like iOS. There are certainly some advantages to how iOS work, but this view is too focused on one specific detail to be useful, and glosses over actual similarities in how they behave.&lt;/p&gt;
&lt;p&gt;Android had a number of very different original design goals than iOS did. A key goal of Android was to provide an open application platform, using application sandboxes to create a much more secure environment that doesn‚Äôt rely on a central authority to verify that applications do what they claim. To achieve this, it uses Linux process isolation and user IDs to prevent each application from being able to access the system or other application in ways that are not controlled and secure.&lt;/p&gt;
&lt;p&gt;This is very different from iOS‚Äôs original design constraints, which remember didn‚Äôt allow any third party applications at all.&lt;/p&gt;
&lt;p&gt;An important part of achieving this security is having a way for (EDIT: It has been pointed out to me that iOS does in fact use multiple windows and multiple GL contexts. Lesson to me, just don‚Äôt talk about anything I haven‚Äôt directly verified. üôÇ That still doesn‚Äôt change things for Android, though, where as I mention later we simply did not have hardware and drivers that could do multiple GL contexts until fairly recently.)
individual UI elements to share the screen in a secure way. This is why there are windows on Android. The status bar and its notification shade are windows owned and drawn by the system. These are separate from the application‚Äôs window, so the application can not touch anything about the status bar, such as to scrape the text of SMS messages as they are displayed there. Likewise the soft keyboard is a separate window, owned by a separate application, and it and the application can only interact with each other through a well defined and controlled interface. (This is also why Android can safely support third party input methods.)&lt;/p&gt;
&lt;p&gt;Another objective of Android was to allow close collaboration between applications, so that for example it is easy to implement a share API that launches a part of another application integrated with the original application‚Äôs flow. As part of this, Android applications traditionally are split into pieces (called ‚ÄúActivities‚Äù) that handle a single specific part of the UI of the application. For example, the contacts lists is one activity, the details of a contact is another, and editing a contact is a third. Moving between those parts of the contacts UI means switching between these activities, and each of these activities is its own separate window.&lt;/p&gt;
&lt;p&gt;Now we can see something interesting: in almost all of the places in the original Android UI where you see animations, you are actually seeing windows animate. Launching Contacts is an animation of the home screen window and the contacts list window. Tapping on a contact to see its details is an animation of the contacts list window and the contacts details window. Displaying the soft keyboard is an animation of the keyboard window. Showing the dialog where you pick an app to share with is an animation of a window displaying that dialog.&lt;/p&gt;
&lt;p&gt;When you see a window on screen, what you are seeing is actually something called a ‚Äúsurface‚Äù. This is a separate piece of shared memory that the window draws its UI in, and is composited with the other windows to the screen by a separate system service (in a separate thread, running at a higher than normal priority) called the ‚Äúsurface flinger.‚Äù Does this sound familiar? In fact this is very much like what iOS is doing with its views being composited by a separate thread, just at a less fine-grained but significantly more secure level. (And this window composition has been hardware accelerated in Android from the beginning.)&lt;/p&gt;
&lt;p&gt;The other main interesting interaction in the UI is tracking your finger ‚Äî scrolling and flinging a list, swiping a gallery, etc. These interactions involve updating the contents inside of a window, so require re-rendering that window for each movement. However, being able to do this rendering off the main thread probably doesn‚Äôt gain you much. These are not simple ‚Äúmove this part of the UI from X to Y, and maybe tell me when you are done‚Äù animations ‚Äî each movement is based on events received about the finger on the screen, which need to be processed by the application on its main thread.&lt;/p&gt;
&lt;p&gt;That said, being able to avoid redrawing all of the contents of the parts of the UI that are moving can help performance. And this is also a technique that Android has employed since before 1.0; UI elements like a ListView that want to scroll their content can call &lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#setDrawingCacheEnabled(boolean&quot;&gt;http://developer.android.com/reference/android/view/View.html#setDrawingCacheEnabled(boolean&lt;/a&gt;) to have that content rendered into a cache so that only the bitmap needs to be drawn as it moves.&lt;/p&gt;
&lt;p&gt;Traditionally on Android, views only have their drawing cache enabled as a transient state, such as while scrolling or tracking a finger. This is because they introduce a fair amount more overhead: extra memory for the bitmap (which can easily total to multiple times larger than the actual frame buffer if there are a number of visual layers), and when the contents inside of a cached view need to be redrawn it is more expensive because there is an additional step required to draw the cached bitmap back to the window.&lt;/p&gt;
&lt;p&gt;So, all those things considered, in Android 1.0 having each view drawn into a texture and those textures composited to the window in another thread is just not that much of a gain, with a lot of cost. The cost is also in engineering time ‚Äî our time was better spent working on other things like a layout-based view hierarchy (to provide flexibility in adjusting for different screen sizes) and ‚Äúremote views‚Äù for notifications and widgets, which have significantly benefited the platform as it develops.&lt;/p&gt;
&lt;p&gt;In fact it was just not feasible to implement hardware accelerated drawing inside windows until recently. Because Android is designed around having multiple windows on the screen, to have the drawing inside each window be hardware accelerated means requiring that the GPU and driver support multiple active GL contexts in different processes running at the same time. The hardware at that time just didn‚Äôt support this, even ignoring the additional memory needed for it that was not available. Even today we are in the early stages of this ‚Äî most mobile GPUs still have fairly expensive GL context switching.&lt;/p&gt;
&lt;p&gt;I hope this helps people better understand how Android works. And just to be clear again from my last point ‚Äî I am not writing this to make excuses for whatever things people don‚Äôt like about Android, I just get tired of seeing people write egregiously wrong explanations about how Android works and worse present themselves as authorities on the topic.&lt;/p&gt;
&lt;p&gt;There are of course many things that can be improved in Android today, just as there are many things that have been improved since 1.0. As other more pressing issues are addressed, and hardware capabilities improve and change, we continue to push the platform forward and make it better.&lt;/p&gt;
&lt;p&gt;One final thought. I saw an interesting comment from Brent Royal-Gordon on what developers sometimes need to do to achieve 60fps scrolling in iOS lists: ‚ÄúGetting it up to sixty is more difficult‚Äîyou may have to simplify the cell‚Äôs view hierarchy, or delay adding some of the content, or remove text formatting that would otherwise require a more expensive text rendering API, or even rip the subviews out of the cell altogether and draw everything by hand.‚Äù&lt;/p&gt;
&lt;p&gt;I am no expert on iOS, so I‚Äôll take that as as true. These are the exact same recommendations that we have given to Android‚Äôs app developers, and based on this statement I don‚Äôt see any indication that there is something intrinsically flawed about Android in making lists scroll at 60fps, any more than there is in iOS.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/articles/android-graphics-true-facts-2/&quot;&gt;How about some Android graphics true facts? (Part 2 of 2)&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How about some Android graphics true facts? (Part 1 of 2)]]></title><description><![CDATA[A fantastic Google+ post by Dianne Hackborn (framework engineer on Android) explained the ins and outs of Android's hardware acceleration.]]></description><link>https://kwapoong.github.io/articles/android-graphics-true-facts-1/</link><guid isPermaLink="false">https://kwapoong.github.io/articles/android-graphics-true-facts-1/</guid><pubDate>Thu, 16 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/4e922c5dabc4c979d3900335c978fad7/fc20c/android-logo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Original published at &lt;a href=&quot;https://plus.google.com/105051985738280261832/posts/2FXDCz8x93s&quot;&gt;https://plus.google.com/105051985738280261832/posts/2FXDCz8x93s&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(Edit: there have been a number of comments treating this as being written as an excuse for Android or not mattering to users or such. I‚Äôd just like to clarify that I wrote this solely to address a lot of incorrect information that I see posted around the web as truth. This is no attempt to excuse anything, and it is solely for those who already have an interest in writing and reading the often factually incorrect technical information out there.)&lt;/p&gt;
&lt;p&gt;I get tired of seeing so much misinformation posted and repeated all over the place about how graphics rendering works on Android. Here is some truth:&lt;/p&gt;
&lt;p&gt;‚Ä¢ Android has always used some hardware accelerated drawing. Since before 1.0 all window compositing to the display has been done with hardware.&lt;/p&gt;
&lt;p&gt;‚Ä¢ This means that many of the animations you see have always been hardware accelerated: menus being shown, sliding the notification shade, transitions between activities, pop-ups and dialogs showing and hiding, etc.&lt;/p&gt;
&lt;p&gt;‚Ä¢ Android did historically use software to render the contents of each window. For example in a UI&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; like&lt;/p&gt;
&lt;p&gt;&lt;span
      class=&quot;gatsby-resp-image-wrapper&quot;
      style=&quot;position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 461px; background-color: var(--input-background-color);&quot;
    &gt;
      &lt;span
    class=&quot;gatsby-resp-image-background-image&quot;
    style=&quot;padding-bottom: 166.54545454545456%; position: relative; bottom: 0; left: 0; display: block;&quot;
  &gt;&lt;/span&gt;
  &lt;img
        class=&quot;gatsby-resp-image-image lazyload&quot;
        alt=&quot;alt text&quot;
        title=&quot;alt text&quot;
        src=&quot;https://kwapoong.github.io/static/8344e155d6a3b0048e2259fd36e1e54e/9b127/2-home-menu.png&quot;
        srcset=&quot;https://kwapoong.github.io/static/8344e155d6a3b0048e2259fd36e1e54e/39133/2-home-menu.png 275w,https://kwapoong.github.io/static/8344e155d6a3b0048e2259fd36e1e54e/9b127/2-home-menu.png 461w&quot;
        sizes=&quot;(max-width: 461px) 100vw, 461px&quot;
        style=&quot;width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;&quot;
        loading=&quot;lazy&quot;
      /&gt;
    &lt;/span&gt;&lt;/p&gt;
&lt;p&gt; there are four windows: the status bar, the wallpaper, the launcher on top of the wallpaper, and the menu. If one of the windows updates its contents, such as highlighting a menu item, then (prior to 3.0) software is used to draw the new contents of that window; however none of the other windows are redrawn at all, and the re-composition of the windows is done in hardware. Likewise, any movement of the windows such as the menu going up and down is all hardware rendering.&lt;/p&gt;
&lt;p&gt;‚Ä¢ Looking at drawing inside of a window, you don‚Äôt necessarily need to do this in hardware to achieve full 60fps rendering. This depends very much on the number of pixels in your display and the speed of your CPU. For example, Nexus S has no trouble doing 60fps rendering of all the normal stuff you see in the Android UI like scrolling lists on its 800x480 screen. The original Droid however struggled with a similar screen resolution.&lt;/p&gt;
&lt;p&gt;‚Ä¢ ‚ÄúFull‚Äù hardware accelerated drawing within a window was added in Android 3.0. The implementation in Android 4.0 is not any more full than in 3.0. Starting with 3.0, if you set the flag in your app saying that hardware accelerated drawing is allowed, then all drawing to the application‚Äôs windows will be done with the GPU. The main change in this regard in Android 4.0 is that now apps that are explicitly targeting 4.0 or higher will have acceleration enabled by default rather than having to put android:handwareAccelerated=‚Äútrue‚Äù in their manifest. (And the reason this isn‚Äôt just turned on for all existing applications is that some types of drawing operations can‚Äôt be supported well in hardware and it also impacts the behavior when an application asks to have a part of its UI updated. Forcing hardware accelerated drawing upon existing apps will break a significant number of them, from subtly to significantly.)&lt;/p&gt;
&lt;p&gt;‚Ä¢ Hardware accelerated drawing is not all full of win. For example on the PVR drivers of devices like the Nexus S and Galaxy Nexus, simply starting to use OpenGL in a process eats about 8MB of RAM. Given that our process overhead is about 2MB, this is pretty huge. That RAM takes away from other things, such as the number of background processes that can be kept running, potentially slowing down things like app switching.&lt;/p&gt;
&lt;p&gt;‚Ä¢ Because of the overhead of OpenGL, one may very well not want to use it for drawing. For example some of the work we are doing to make Android 4.0 run well on the Nexus S has involved turning off hardware accelerated drawing in parts of the UI so we don‚Äôt lose 8MB of RAM in the system process, another 8MB in the phone process, another 8MB in the system UI process, etc. Trust me, you won‚Äôt notice ‚Äì there is just no benefit on that device in using OpenGL to draw something like the status bar, even with fancy animations going on in there.&lt;/p&gt;
&lt;p&gt;‚Ä¢ Hardware accelerated drawing is not a magical silver bullet to butter-smooth UI. There are many different efforts that have been going on towards this, such as improved scheduling of foreground vs. background threads in 1.6, rewriting the input system in 2.3, strict mode, concurrent garbage collection, loaders, etc. If you want to achieve 60fps, you have 20 milliseconds to handle each frame. This is not a lot of time. Just touching the flash storage system in the thread that is running the UI can in some cases introduce a delay that puts you out of that timing window, especially if you are writing to storage.&lt;/p&gt;
&lt;p&gt;‚Ä¢ A recent example of the kinds of interesting things that impact UI smoothness: we noticed that ICS on Nexus S was actually less smooth when scrolling through lists than it was on Gingerbread. It turned out that the reason for this was due to subtle changes in timing, so that sometimes in ICS as the app was retrieving touch events and drawing the screen, it would go to get the next event slightly before it was ready, causing it to visibly miss a frame while tracking the finger even though it was drawing the screen at a solid 60fps. (Edit: for those who need this made clear, yes of course this particular issue is fixed.)&lt;/p&gt;
&lt;p&gt;‚Ä¢ When people have historically compared web browser scrolling between Android and iOS, most of the differences they are seeing are not due to hardware accelerated drawing. Originally Android went a different route for its web page rendering and made different compromises: the web page is turned in to a display list, which is continually rendered to the screen, instead of using tiles. This has the benefit that scrolling and zooming never have artifacts of tiles that haven‚Äôt yet been drawn. Its downside is that as the graphics on the web page get more complicated to draw the frame rate goes down. As of Android 3.0, the browser now uses tiles, so it can maintain a consistent frame rate as you scroll or zoom, with the negative of having artifacts when newly needed tiles can‚Äôt be rendered quickly enough. The tiles themselves are rendered in software, which I believe is the case for iOS as well. (And this tile-based approach could be used prior to 3.0 without hardware accelerated drawing; as mentioned previously, the Nexus S CPU can easily draw the tiles to the window at 60fps.)&lt;/p&gt;
&lt;p&gt;‚Ä¢ Hardware accleration does not magically make drawing performance problems disappear. There is still a limit to how much the GPU can do. A recent interesting example of this is tablets built with Tegra 2 ‚Äì that GPU can touch every pixel of a 1280x800 screen about 2.5 times at 60fps. Now consider the Android 3.0 tablet home screen where you are switching to the all apps list: you need to draw the background (1x all pixels), then the layer of shortcuts and widgets (let‚Äôs be nice and say this is .5x all pixels), then the black background of all apps (1x all pixels), and the icons and labels of all apps (.5x all pixels). We‚Äôve already blown our per-pixel budget, and we haven‚Äôt even composited the separate windows to the final display yet. To get 60fps animation, Android 3.0 and later use a number of tricks. A big one is that it tries to put all windows into overlays instead of having to copy them to the framebuffer with the GPU. In the case here even with that we are still over-budget, but we have another trick: because the wallpaper on Android is in a separate window, we can make this window larger than the screen to hold the entire bitmap. Now, as you scroll, the movement of the background doesn‚Äôt require any drawing, just moving its window‚Ä¶ and because this window is in an overlay, it doesn‚Äôt even need to be composited to the screen with the GPU.&lt;/p&gt;
&lt;p&gt;‚Ä¢ As device screen resolution goes up, achieving a 60fps UI is closely related to GPU speed and especially the GPU‚Äôs memory bus bandwidth. In fact, if you want to get an idea of the performance of a piece of hardware, always pay close attention to the memory bus bandwidth. There are plenty of times where the CPU (especially with those wonderful NEON instructions) can go a lot faster than the memory bus.&lt;/p&gt;
&lt;p&gt;EDIT:&lt;/p&gt;
&lt;p&gt;Wow this has generated a lot more discussion, and I won‚Äôt be able to address nearly everything that has been raised. But I‚Äôll try to expand on things a bit here to better address what I think are some of the more interesting points.&lt;/p&gt;
&lt;p&gt;Some have raised points along the lines of Samsung Galaxy S2 phones already having a smoother UI and indicating that they are doing something different vs. the Galaxy Nexus. When comparing individual devices though you really need to look at all of the factors. For example, the S2‚Äôs screen is 480x800 vs. the Galaxy Nexus at 720x1280. If the Nexus S could already do 60fps for simple UIs on its 480x800, the CPU in the S2‚Äôs is even better off.&lt;/p&gt;
&lt;p&gt;The real important difference between these two screens is just that the Galaxy Nexus has 2.4x as many pixels that need to be drawn as the S2. This means that to achieve the same efficiency at drawing the screen, you need a CPU that can run a single core at 2.4x the speed (and rendering a UI for a single app is essentially not parallelizable, so multiple cores isn‚Äôt going to save you).&lt;/p&gt;
&lt;p&gt;This is where hardware accelerated rendering really becomes important: as the number of pixels goes up, GPUs can generally scale much better to handle them, since they are more specialized at their task. In fact this was the primary incentive for implementing hardware accelerated drawing in Android ‚Äì at 720x1280 we are well beyond the point where current ARM CPUs can provide 60fps. (And this is a reason to be careful about making comparisons between the Galaxy Nexus and other devices like the S2 ‚Äì if you are running third party apps, there is a good chance today that the app is not enabling hardware acceleration, so your comparison is doing CPU rendering on the Galaxy Nexus which means you almost certainly aren‚Äôt going to get 60fps out of it, because it needs to hit 2.4x as many pixels as the S2 does.)&lt;/p&gt;
&lt;p&gt;To be complete, there is another big advantage that the GPU gives you ‚Äì many more drawing effects become feasible. For example, if you are drawing a bitmap in software, you basically can‚Äôt do anything to it except apply an offset. Just trying to scale it is going to make rendering significantly slower. On a GPU, applying transformations well beyond simple scales is basically free. This is why in the new default Holo themes in Android we have background images ‚Äì with hardware accelerated drawing, we can afford to draw (and scale) them. In fact, if the hardware path is not enabled by the app, these background images will be turned off.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.simplemobilereview.com/wp-content/uploads/2010/12/2-home-menu.png&quot;&gt;http://www.simplemobilereview.com/wp-content/uploads/2010/12/2-home-menu.png&lt;/a&gt;&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/articles/android-graphics-true-facts-1/&quot;&gt;How about some Android graphics true facts? (Part 1 of 2)&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How should I design my Android application?]]></title><description><![CDATA[A fantastic Google+ post by Dianne Hackborn (framework engineer on Android) explained the ins and outs of Android's hardware acceleration.]]></description><link>https://kwapoong.github.io/articles/android-system-framework-architecture/</link><guid isPermaLink="false">https://kwapoong.github.io/articles/android-system-framework-architecture/</guid><pubDate>Thu, 16 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/4e922c5dabc4c979d3900335c978fad7/fc20c/android-logo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Original published at &lt;a href=&quot;https://plus.google.com/+DianneHackborn/posts/FXCCYxepsDU&quot;&gt;https://plus.google.com/+DianneHackborn/posts/FXCCYxepsDU&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;‚ÄúHow should I design my Android application? What kind of MVC pattern should I use? What should I use for an event bus?‚Äù&lt;/p&gt;
&lt;p&gt;We often see questions from developers that are asking from the Android platform engineers about the kinds of design patterns and architectures they use in their apps. But the answer, maybe surprisingly, is we often don‚Äôt have a strong opinion or really an opinion at all.&lt;/p&gt;
&lt;p&gt;(Edit to clarify: when I write ‚Äúwe‚Äù here I am talking about the Android platform team. I am not speaking for all of Google or Android developer relations. There are lots of good suggestions and opinions inside and outside of Google about how to write apps, and I am not intending to dismiss those.)&lt;/p&gt;
&lt;p&gt;Should you use MVC? Or MVP? Or MVVM? I have no idea. Heck, I only know about MVC from school and had to do a Google search to find other options to put here.&lt;/p&gt;
&lt;p&gt;This may be surprising, because Android could feel like it has strong opinions on how apps should be written. With its Java language APIs and fairly high-level concepts, it can look like a typical application framework that is there to say how applications should be doing their work. But for the most part, it is not.&lt;/p&gt;
&lt;p&gt;It is probably better to call the core Android APIs a ‚Äúsystem framework.‚Äù For the most part, the platform APIs we provide are there to define how an application interacts with the operating system; but for anything going on purely within the app, these APIs are often just not relevant.&lt;/p&gt;
&lt;p&gt;That said, the Android APIs can often look different (or higher level) from what one typically expects in an operating system, which may easily lead to confusion about how they should be used.&lt;/p&gt;
&lt;p&gt;For an example of this, let‚Äôs consider how an operating system defines ‚Äúhow to run an app.‚Äù In a classic system, this is basically the contract it has with an application about when it should run:&lt;/p&gt;
&lt;p&gt;int main(‚Ä¶) {
// My app goes here!
}&lt;/p&gt;
&lt;p&gt;So the operating system starts the app, calls its main() function, and the app goes off and runs and does what it wants until it decides it is done. And clearly it is not saying anything here about what the app should be doing or how it should be designed within that main function ‚Äì it‚Äôs a pretty pure blank slate.&lt;/p&gt;
&lt;p&gt;In Android, however, we explicitly decided we were not going to have a main() function, because we needed to give the platform more control over how an app runs. In particular, we wanted to build a system where the user never needed to think about starting and stopping apps, but rather the system took care of this for them‚Ä¶ so the system had to have some more information about what is going on inside of each app, and be able to launch apps in various well-defined ways whenever it is needed even if it currently isn‚Äôt running.&lt;/p&gt;
&lt;p&gt;To accomplish this, we decomposed the typical main entry point of an app into a few different types of interactions the system can have with it. And these are the Activity, BroadcastReceiver, Service, and ContentProvider APIs that Android developers quickly become familiar with.&lt;/p&gt;
&lt;p&gt;These classes may look like they are telling you how the internals of your app should work, but they are not! In fact, they are all about how your app needs to interact with the system (and how the system can coordinate its interaction with other apps). As long as that interaction with the system happens, we don‚Äôt really care what goes on inside of the app.&lt;/p&gt;
&lt;p&gt;To illustrate, let‚Äôs briefly look at these different APIs and what they really mean to the Android system.&lt;/p&gt;
&lt;p&gt;Activity&lt;/p&gt;
&lt;p&gt;This is the entry into an application for interacting with the user. From the system‚Äôs perspective, the key interactions it provides with the app are:&lt;/p&gt;
&lt;p&gt;‚Ä¢ Keep track of what the user currently cares about (what is on screen) to ensure the process hosting that is kept running.
‚Ä¢ Know that previously used processes contain things the user may return to (stopped activities), and thus more highly prioritize keeping those processes around.
‚Ä¢ Help the application deal with the situation where its process is killed so the user can return to activities with their previous state restored.
‚Ä¢ Provide a way for applications to implement user flows between each other, coordinated by the system. (The most classic example here being share.)&lt;/p&gt;
&lt;p&gt;What we don‚Äôt care about:&lt;/p&gt;
&lt;p&gt;Once we have gotten in to this entry-point to your UI, we really don‚Äôt care how you organize the flow inside. Make it all one activity with manual changes to its views, use fragments (a convenience framework we provide) or some other framework, or split it into additional internal activities. Or do all three as needed. As long as you are following the high-level contact of activity (it launches in the proper state, and saves/restores in the current state), it doesn‚Äôt matter to the system.&lt;/p&gt;
&lt;p&gt;BroadcastReceiver&lt;/p&gt;
&lt;p&gt;This is a mechanism for the system to deliver events to the application that may be outside of a regular user flow. Most importantly, because this is another well-defined entry into the app, the system can deliver broadcasts to apps even if they aren‚Äôt currently running. So, for example, an app can schedule an alarm to post a notification to tell the user about an upcoming event‚Ä¶ and by delivering that alarm to a BroadcastReceiver of the app, there is no need for the app to remain running until the alarm goes off.&lt;/p&gt;
&lt;p&gt;What we don‚Äôt care about:&lt;/p&gt;
&lt;p&gt;Dispatching events within an app is an entirely different thing. Whether you use some event bus framework, implement your own callback system, whatever‚Ä¶ there is no reason to use the system‚Äôs broadcasting mechanism, since you aren‚Äôt dispatching events across apps. (In fact there is good reason not to ‚Äì there is a lot of unnecessary overhead and many potential security issues if using a global broadcast mechanism for the internal implementation of an app.) We do provide the LocalBroadcastManager convenience class that implements a purely in-process intent dispatching system with a similar API to the system‚Äôs APIs, if you happen to like them. But again, there is no reason to use that over something else for things going on purely within your app.&lt;/p&gt;
&lt;p&gt;Service&lt;/p&gt;
&lt;p&gt;A general-purpose entry point for keeping an app running in the background for all kinds of reasons. There are actually two very distinct semantics services tell the system about how to manage an app:&lt;/p&gt;
&lt;p&gt;Started services are simply telling the system to, for some reason, ‚Äúkeep me running until I say I am done.‚Äù This could be to sync some data in the background or play music even after the user leaves the app. Those also represent two different types of started services that modify how the system handles them:&lt;/p&gt;
&lt;p&gt;‚Ä¢ Music playback is something the user is directly aware of, so the app tells the system this by saying it wants to be foreground with a notification to tell the user about it; in this case the system knows that it should try really hard to keep that service‚Äôs process running, because the user will be unhappy if it goes away.&lt;/p&gt;
&lt;p&gt;‚Ä¢ A regular background service is not something the user is directly aware as running, so the system has more freedom in managing its process. It may allow it to be killed (and then restarting the service sometime later) if it needs RAM for things that are of more immediate concern to the user.&lt;/p&gt;
&lt;p&gt;Bound services are running because some other app (or the system) has said that it wants to make use of the service. This is basically the service providing an API to another process. The system thus knows there is a dependency between these processes, so if process A is bound to a service in process B, it knows that it needs to keep process B (and its service) running for A. Further, if process A is something the user cares about, than it also knows to treat process B as something the user also cares about.&lt;/p&gt;
&lt;p&gt;Because of their flexibility (for better or worse), services have turned out to be a really useful building block for all kinds of higher-level system concepts. Live wallpapers, notification listeners, screen savers, input methods, accessibility services, and many other core system features are all built as services that applications implement and the system binds to when they should be running.&lt;/p&gt;
&lt;p&gt;What we don‚Äôt care about:&lt;/p&gt;
&lt;p&gt;Android doesn‚Äôt care about things going on within your app that don‚Äôt have any impact on how it should manage your process, so there is no reason to use services in these cases. For example, if you want to start some background operation to download data for your UI, you should not use a service for this ‚Äì it is actually important to not be telling the system to keep your process running while doing this, because it really doesn‚Äôt need to be and the system would be better off having more freedom in managing it with other things the user is doing.&lt;/p&gt;
&lt;p&gt;If you just make a simple background thread (or whatever non-service mechanism you want) to do the downloading, you will get the semantics you want: while the user is in your UI, the system will keep your process running for that, so the download will never be interrupted. When they leave your UI, your process will still be kept around (cached) and able to continue downloading, as long as its RAM isn‚Äôt needed elsewhere.&lt;/p&gt;
&lt;p&gt;Likewise for connecting different parts of your app together, there is no reason to bind to a service that is running in the same process as the one binding to it. Doing so is not actively harmful ‚Äì the system just sees a dependency from the process to itself so doesn‚Äôt try to keep it around any more than usual ‚Äì but it is a bunch of unnecessary work for both you and the system. Instead, you can just use singletons or other normal in-process patterns for connecting pieces of your app together.&lt;/p&gt;
&lt;p&gt;ContentProvider&lt;/p&gt;
&lt;p&gt;Finally, the ContentProvider is a fairly specialized facility for publishing data from an app to other places. People generally think of them as an abstraction on a database, because there is a lot of API and support built in to them for that common case‚Ä¶ but from the system design perspective, that isn‚Äôt their point.&lt;/p&gt;
&lt;p&gt;What these are to the system is an entry-point into an app for publishing named data items, identified by a URI scheme. Thus an app can decide how it wants to map the data it contains to a URI namespace, handing out those URIs to other entities which can in turn use them to access the data. There are a few particular things this allows the system to do in managing an app:&lt;/p&gt;
&lt;p&gt;‚Ä¢ Handing out a URI doesn‚Äôt require the app remain running, so these can go all over the place with the owning app being dead. Only at the point where someone tells the system, ‚Äúhey give me the data for this URI‚Äù does it need to make sure the app owning that data is running, so it can ask the app to retrieve and return the data.&lt;/p&gt;
&lt;p&gt;‚Ä¢ These URIs also provide an important fine-grained security model. For example, an application can place the URI for an image it has on the clipboard, but leave its content provider locked up so nobody can freely access it. When another app pulls that URI off the clipboard, the system can give it a temporary ‚ÄúURI permission grant‚Äù so that it is allowed to access the data only behind that URI, but nothing else in the app.&lt;/p&gt;
&lt;p&gt;What we don‚Äôt care about:&lt;/p&gt;
&lt;p&gt;It doesn‚Äôt really matter how you implement the data management behind a content provider; if you don‚Äôt need structured data in a SQLite database, don‚Äôt use SQLite. For example, the FileProvider helper class is an easy way to make raw files in your app available through a content provider.&lt;/p&gt;
&lt;p&gt;Also, if you are not publishing data from your app for others to use, there is no need to use a content provider at all. It is true, because of the various helpers built around content providers, this can be an easy way to put data in a SQLite database and use it to populate UI elements like a ListView. But if any of this stuff makes what you are trying to do more difficult, then feel free to not use it and instead use a more appropriate data model for your app.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/articles/android-system-framework-architecture/&quot;&gt;How should I design my Android application?&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to Remove a Submodule in Git]]></title><description><![CDATA[Removing a submodule is useful when it is no longer required. The steps below outline the removal of a submodule.]]></description><link>https://kwapoong.github.io/notes/how-to-remove-a-submodule-in-git/</link><guid isPermaLink="false">https://kwapoong.github.io/notes/how-to-remove-a-submodule-in-git/</guid><pubDate>Thu, 16 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/846ec3be36827113b49d2bd227433386/c4e4c/git-tips-and-tricks.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Removing a submodule is useful when it is no longer required. The steps&lt;sup id=&quot;fnref-1&quot;&gt;&lt;a href=&quot;#fn-1&quot; class=&quot;footnote-ref&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; below outline the removal of a submodule:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete the section referring to the submodule from the &lt;code class=&quot;language-text&quot;&gt;.gitmodules&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Stage the changes via &lt;code class=&quot;language-text&quot;&gt;git add .gitmodules&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete the relevant section of the submodule from &lt;code class=&quot;language-text&quot;&gt;.git/config&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;git rm --cached path_to_submodule&lt;/code&gt; (no trailing slash)&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;rm -rf .git/modules/path_to_submodule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Commit the changes with &lt;code class=&quot;language-text&quot;&gt;git commit -m &amp;quot;Removed submodule &amp;lt;name&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete the now untracked submodule files &lt;code class=&quot;language-text&quot;&gt;rm -rf path_to_submodule&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://forum.freecodecamp.org/t/how-to-remove-a-submodule-in-git/13228&quot;&gt;https://forum.freecodecamp.org/t/how-to-remove-a-submodule-in-git/13228&lt;/a&gt;&lt;/p&gt;
&lt;a href=&quot;#fnref-1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/notes/how-to-remove-a-submodule-in-git/&quot;&gt;How to Remove a Submodule in Git&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Squash commits into one with Git]]></title><description><![CDATA[A nice way to group some changes together, especially before sharing them with others.]]></description><link>https://kwapoong.github.io/notes/squash-commits-into-one-with-git/</link><guid isPermaLink="false">https://kwapoong.github.io/notes/squash-commits-into-one-with-git/</guid><pubDate>Thu, 16 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/846ec3be36827113b49d2bd227433386/c4e4c/git-tips-and-tricks.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;Original published at &lt;a href=&quot;https://www.internalpointers.com/post/squash-commits-into-one-git&quot;&gt;https://www.internalpointers.com/post/squash-commits-into-one-git&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In Git you can merge several commits into one with the powerful interactive rebase. It‚Äôs a handy tool I use quite often; I usually tidy up my working space by grouping together several small intermediate commits into a single lump to push upstream.&lt;/p&gt;
&lt;h2 id=&quot;step-1-choose-your-starting-commit&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-1-choose-your-starting-commit&quot; aria-label=&quot;step 1 choose your starting commit permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 1: choose your starting commit&lt;/h2&gt;
&lt;p&gt;The first thing to do is to invoke git to start an interactive rebase session:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase --interactive HEAD~N&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, shorter:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase -i HEAD~N&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;language-text&quot;&gt;N&lt;/code&gt; is the number of commits you want to join, &lt;em&gt;starting from the most recent one&lt;/em&gt;. For example, this is a hypothetical list of commits taken from the &lt;code class=&quot;language-text&quot;&gt;git log&lt;/code&gt; command, while I‚Äôm working on a generic feature Z:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;871adf OK, feature Z is fully implemented      --- newer commit
0c3317 Whoops, not yet...
87871a I&amp;#39;m ready!
643d0e Code cleanup
afb581 Fix this and that
4e9baa Cool implementation
d94e78 Prepare the workbench for feature Z
6394dc Feature Y                               --- older commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is what I would like to do:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;871adf OK, feature Z is fully implemented      --- newer commit --‚îê
0c3317 Whoops, not yet...                                         |
87871a I&amp;#39;m ready!                                                 |
643d0e Code cleanup                                               |-- Join these into one
afb581 Fix this and that                                          |
4e9baa Cool implementation                                        |
d94e78 Prepare the workbench for feature Z     -------------------‚îò
6394dc Feature Y                               --- older commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obtaining:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;84d1f8 Feature Z                               --- newer commit (result of rebase)
6394dc Feature Y                               --- older commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how a rebase generates a new commit with a new hash (&lt;code class=&quot;language-text&quot;&gt;84d1f8&lt;/code&gt; in the example above). So in this case the command would be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase --interactive HEAD~[7]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;because I want to combine the last seven commits into one, and &lt;code class=&quot;language-text&quot;&gt;d94e78 Prepare the workbench for feature Z&lt;/code&gt; is the seventh one.&lt;/p&gt;
&lt;h3 id=&quot;i-have-tons-of-commits-to-squash-do-i-have-to-count-them-one-by-one&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#i-have-tons-of-commits-to-squash-do-i-have-to-count-them-one-by-one&quot; aria-label=&quot;i have tons of commits to squash do i have to count them one by one permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;I have tons of commits to squash, do I have to count them one by one?&lt;/h3&gt;
&lt;p&gt;A downside of the &lt;code class=&quot;language-text&quot;&gt;git rebase --interactive HEAD~[N]&lt;/code&gt; command is that you have to guess the exact number of commits, by counting them one by one. Luckily, there is another way:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase --interactive [commit-hash]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code class=&quot;language-text&quot;&gt;[commit-hash]&lt;/code&gt; is the hash of &lt;em&gt;the commit just before the first one you want to rewrite from&lt;/em&gt;. So in my example the command would be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git rebase --interactive 6394dc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code class=&quot;language-text&quot;&gt;6394dc&lt;/code&gt; is &lt;code class=&quot;language-text&quot;&gt;Feature Y&lt;/code&gt;. You can read the whole thing as:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Merge all my commits on top of commit &lt;code class=&quot;language-text&quot;&gt;[commit-hash]&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Way easier, isn‚Äôt it?&lt;/p&gt;
&lt;h2 id=&quot;step-2-picking-and-squashing&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-2-picking-and-squashing&quot; aria-label=&quot;step 2 picking and squashing permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 2: picking and squashing&lt;/h2&gt;
&lt;p&gt;At this point your editor of choice will pop up, showing the list of commits you want to merge. Note that it might be confusing at first, since they are displayed in a reverse order, where the older commit is on top. I‚Äôve added &lt;code class=&quot;language-text&quot;&gt;--- older commit&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;--- newer commit&lt;/code&gt; to make it clear, you won‚Äôt find those notes in the editor.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;pick d94e78 Prepare the workbench for feature Z     --- older commit
pick 4e9baa Cool implementation 
pick afb581 Fix this and that  
pick 643d0e Code cleanup
pick 87871a I&amp;#39;m ready! 
pick 0c3317 Whoops, not yet... 
pick 871adf OK, feature Z is fully implemented      --- newer commit

[...]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below the commit list there is a short comment (omitted in my example) which outlines all the operations available. You can do many smart tricks during an interactive rebase, let‚Äôs stick with the basics for now though. Our task here is to mark all the commits as &lt;strong&gt;squashable&lt;/strong&gt;, &lt;em&gt;except the first/older one&lt;/em&gt;: it will be used as a starting point.&lt;/p&gt;
&lt;p&gt;You mark a commit as squashable by changing the word pick into squash next to it (or s for brevity, as stated in the comments). The result would be:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;pick d94e78 Prepare the workbench for feature Z     --- older commit
s 4e9baa Cool implementation 
s afb581 Fix this and that  
s 643d0e Code cleanup
s 87871a I&amp;#39;m ready! 
s 0c3317 Whoops, not yet... 
s 871adf OK, feature Z is fully implemented      --- newer commit

[...]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the file and close the editor.&lt;/p&gt;
&lt;h2 id=&quot;step-3-create-the-new-commit&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#step-3-create-the-new-commit&quot; aria-label=&quot;step 3 create the new commit permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Step 3: Create the new commit&lt;/h2&gt;
&lt;p&gt;You have just told Git to combine all seven commits into the the first commit in the list. It‚Äôs now time to give it a name: your editor pops up again with a default message, made of the names of all the commits you have squashed.&lt;/p&gt;
&lt;p&gt;You can leave it as it is and the commit message will result in a list of all the intermediate commits, as follows:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Prepare the workbench for feature Z
Cool implementation 
Fix this and that  
Code cleanup
I&amp;#39;m ready! 
Whoops, not yet... 
OK, feature Z is fully implemented&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Usually I don‚Äôt care to keep such information, so I wipe out the default message and use something more self-explanatory like &lt;code class=&quot;language-text&quot;&gt;Implemented feature Z&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;sources&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#sources&quot; aria-label=&quot;sources permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Stackoverflow - &lt;a href=&quot;https://stackoverflow.com/questions/41464752/git-rebase-interactive-the-last-n-commits&quot;&gt;Git rebase interactive the last n commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackoverflow - &lt;a href=&quot;https://stackoverflow.com/questions/2563632/how-can-i-merge-two-commits-into-one&quot;&gt;How can I merge two commits into one?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gitready - &lt;a href=&quot;http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html&quot;&gt;Squashing commits with rebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/notes/squash-commits-into-one-with-git/&quot;&gt;Squash commits into one with Git&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2 Little Rosebuds]]></title><description><![CDATA[Creative and site development for 2 Little Rosebuds ‚Äî a blog all about subscription boxes.]]></description><link>https://kwapoong.github.io/work/2-little-rosebuds/</link><guid isPermaLink="false">https://kwapoong.github.io/work/2-little-rosebuds/</guid><pubDate>Tue, 21 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/ab2790e0c90f736bffa60842de98ef88/fc20c/2-little-rosebuds-feature.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;TODO&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/work/2-little-rosebuds/&quot;&gt;2 Little Rosebuds&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Cut My Face in Half]]></title><description><![CDATA[Tiny portrait of Michael Rose painted with watercolor on hot press paper.]]></description><link>https://kwapoong.github.io/tiny-paintings/michael-rose-painting/</link><guid isPermaLink="false">https://kwapoong.github.io/tiny-paintings/michael-rose-painting/</guid><pubDate>Fri, 16 Oct 2015 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/e9fedd5a391415212f5259e215a883e0/fc20c/painting-michael-rose.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;TODO&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/tiny-paintings/michael-rose-painting/&quot;&gt;Cut My Face in Half&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Lego Man]]></title><description><![CDATA[PaperFaces portrait of @yorgle drawn with Paper for iOS on an iPad.]]></description><link>https://kwapoong.github.io/paperfaces/yorgle-portrait/</link><guid isPermaLink="false">https://kwapoong.github.io/paperfaces/yorgle-portrait/</guid><pubDate>Thu, 21 Aug 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/0e2e1f96ee3d3297ca9a4acab5ea34ad/fc20c/paperfaces-yorgle-twitter.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;TODO&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/paperfaces/yorgle-portrait/&quot;&gt;Lego Man&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mastering Paper for iOS: back to the basics]]></title><description><![CDATA[A refresher tutorial on Paper for iOS drawing and painting techniques, along with color theory principles for good measure.]]></description><link>https://kwapoong.github.io/mastering-paper/basics/</link><guid isPermaLink="false">https://kwapoong.github.io/mastering-paper/basics/</guid><pubDate>Sun, 09 Feb 2014 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/56f71a1f107d6e3f300192eb73acd1d3/fc20c/paper-53-basics-feature.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;TODO&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/mastering-paper/basics/&quot;&gt;Mastering Paper for iOS: back to the basics&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Tattoos turning to mud]]></title><description><![CDATA[Portrait of Wendy Rose, digitally painted with Procreate on an iPad.]]></description><link>https://kwapoong.github.io/procreate-paintings/wendy-rose-portrait/</link><guid isPermaLink="false">https://kwapoong.github.io/procreate-paintings/wendy-rose-portrait/</guid><pubDate>Tue, 03 Sep 2013 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;https://kwapoong.github.io/static/d0101ff003c6d18ad6671c039fff0d79/fc20c/wendy-rose-procreate.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;TODO&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://kwapoong.github.io/procreate-paintings/wendy-rose-portrait/&quot;&gt;Tattoos turning to mud&lt;/a&gt; was originally published on Made Mistakes.&lt;/p&gt;</content:encoded></item></channel></rss>
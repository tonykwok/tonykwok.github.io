{"version":3,"sources":["webpack:///./src/pages/procreate-paintings.js"],"names":["metaImage","site","image","window","postsToShow","Gallery","handleScroll","ticking","requestAnimationFrame","update","state","showingMore","componentDidMount","addEventListener","this","componentWillUnmount","removeEventListener","distanceToBottom","document","documentElement","offsetHeight","pageYOffset","innerHeight","setState","prevState","render","posts","props","data","allMarkdownRemark","edges","map","e","node","postsSize","length","title","path","description","id","className","style","heading","file","childImageSharp","fluid","cover","backgroundColor","content","href","gallery","grid","slice","post","frontmatter","thumbnail","key","gridItem","to","type","data-testid","loadMore","onClick","React","Component"],"mappings":"uPAWMA,EAAYC,IAAKC,MAGnB,oBAAOC,SACTA,OAAOC,YAAc,I,IAGjBC,E,YACJ,aAAe,IAAD,GACZ,sBAqBFC,aAAe,WACR,EAAKC,UACR,EAAKA,SAAU,EACfC,uBAAsB,kBAAM,EAAKC,cAvBnC,IAAIL,EAAc,GAFN,MAGR,oBAAOD,SACTC,EAAcD,OAAOC,aAGvB,EAAKM,MAAQ,CACXC,YAAaP,EAAc,GAC3BA,eATU,E,4CAadQ,kBAAA,WACET,OAAOU,iBAAP,SAAkCC,KAAKR,e,EAGzCS,qBAAA,WACEZ,OAAOa,oBAAP,SAAqCF,KAAKR,cAC1CH,OAAOC,YAAcU,KAAKJ,MAAMN,a,EAUlCK,OAAA,WACE,IAAMQ,EACJC,SAASC,gBAAgBC,cACxBjB,OAAOkB,YAAclB,OAAOmB,aAC3BR,KAAKJ,MAAMC,aAAeM,EAAmB,KAC/CH,KAAKS,UAAS,SAACC,GAAD,MAAgB,CAC5BpB,YAAaoB,EAAUpB,YAAc,OAGzCU,KAAKP,SAAU,G,EAGjBkB,OAAA,WAAU,IAAD,OACDC,EAAQZ,KAAKa,MAAMC,KAAKC,kBAAkBC,MAAMC,KAAI,SAACC,GAAD,OAAOA,EAAEC,QAC7DC,EAAYpB,KAAKa,MAAMC,KAAKC,kBAAkBC,MAAMK,OAE1D,OACE,wBAAC,IAAD,KACE,wBAAC,IAAD,CACEC,MAAK,8BAAgCnC,IAAKmC,MAC1CC,KAAK,wBACLC,YAAY,4HAEZtC,UAAWA,IAEb,gCAAMuC,GAAG,OAAOC,UAAWC,IAAMvB,UAC/B,+BAAKsB,UAAWC,IAAML,OACpB,8BAAII,UAAWC,IAAMC,SACnB,oCACE,mEAIL5B,KAAKa,MAAMC,KAAKe,KAAKC,gBAAgBC,OACpC,wBAAC,IAAD,CACEA,MAAO/B,KAAKa,MAAMC,KAAKe,KAAKC,gBAAgBC,MAC5CL,UAAWC,IAAMK,MACjBC,gBAAgB,kCAGpB,+BAAKP,UAAWC,IAAMO,SACpB,0FACyD,IACvD,6BAAGC,KAAK,wBACN,mDADF,0BAFF,MAQF,+BAAKT,UAAWC,IAAMS,SACpB,wBAAC,IAAD,CAASV,UAAWC,IAAMU,MACvBzB,EAAM0B,MAAM,EAAGtC,KAAKJ,MAAMN,aAAa2B,KAAI,SAACsB,GAC3C,IAAMnD,EAAQmD,EAAKC,YAAYC,UAC3BF,EAAKC,YAAYC,UACjBF,EAAKC,YAAYpD,MAErB,OACE,+BAAKsD,IAAKH,EAAKd,GAAIC,UAAWC,IAAMgB,UAClC,wBAAC,OAAD,CAAMC,GAAIL,EAAKC,YAAYjB,MACzB,wBAAC,IAAD,CACEQ,MAAO3C,EAAM0C,gBAAgBC,MAC7BE,gBAAgB,wCAO3Bb,GAAapB,KAAKV,cACfU,KAAKJ,MAAMC,aACX,kCACEgD,KAAK,SACLC,cAAY,YACZpB,UAAWC,IAAMoB,SACjBC,QAAS,WACP,EAAKvC,SAAS,CACZnB,YAAa,EAAKM,MAAMN,YAAc,GACtCO,aAAa,MAPnB,iB,GApGMoD,UAAMC,WA+Kb3D","file":"component---src-pages-procreate-paintings-js-b0b19d7cff80d3f5eee3.js","sourcesContent":["import React from 'react'\nimport Masonry from 'react-masonry-component'\nimport Img from 'gatsby-image'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\n\nimport site from '../../config/site'\nimport style from '../styles/document.module.css'\n\nconst metaImage = site.image\n\n// This would normally be in a Redux store or some other global data store.\nif (typeof window !== `undefined`) {\n  window.postsToShow = 20\n}\n\nclass Gallery extends React.Component {\n  constructor() {\n    super()\n    let postsToShow = 20\n    if (typeof window !== `undefined`) {\n      postsToShow = window.postsToShow\n    }\n\n    this.state = {\n      showingMore: postsToShow > 20,\n      postsToShow,\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(`scroll`, this.handleScroll)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(`scroll`, this.handleScroll)\n    window.postsToShow = this.state.postsToShow\n  }\n\n  handleScroll = () => {\n    if (!this.ticking) {\n      this.ticking = true\n      requestAnimationFrame(() => this.update())\n    }\n  }\n\n  update() {\n    const distanceToBottom =\n      document.documentElement.offsetHeight -\n      (window.pageYOffset + window.innerHeight)\n    if (this.state.showingMore && distanceToBottom < 100) {\n      this.setState((prevState) => ({\n        postsToShow: prevState.postsToShow + 20,\n      }))\n    }\n    this.ticking = false\n  }\n\n  render() {\n    const posts = this.props.data.allMarkdownRemark.edges.map((e) => e.node)\n    const postsSize = this.props.data.allMarkdownRemark.edges.length\n\n    return (\n      <Layout>\n        <SEO\n          title={`Procreate iPad paintings - ${site.title}`}\n          path=\"/procreate-paintings/\"\n          description=\"Gallery of digital paintings created with Procreate on\n          an iPad. Find time lapse videos, in-process screenshots, and more.\"\n          metaImage={metaImage}\n        />\n        <main id=\"main\" className={style.document}>\n          <div className={style.title}>\n            <h1 className={style.heading}>\n              <span>\n                <span>Procreate iPad paintings</span>\n              </span>\n            </h1>\n          </div>\n          {this.props.data.file.childImageSharp.fluid && (\n            <Img\n              fluid={this.props.data.file.childImageSharp.fluid}\n              className={style.cover}\n              backgroundColor=\"var(--input-background-color)\"\n            />\n          )}\n          <div className={style.content}>\n            <p>\n              Digital paintings created on an iPad using the iOS app{' '}\n              <a href=\"http://procreate.si/\">\n                <strong>Procreate</strong> by Savage Interactive\n              </a>\n              .\n            </p>\n          </div>\n          <div className={style.gallery}>\n            <Masonry className={style.grid}>\n              {posts.slice(0, this.state.postsToShow).map((post) => {\n                const image = post.frontmatter.thumbnail\n                  ? post.frontmatter.thumbnail\n                  : post.frontmatter.image\n\n                return (\n                  <div key={post.id} className={style.gridItem}>\n                    <Link to={post.frontmatter.path}>\n                      <Img\n                        fluid={image.childImageSharp.fluid}\n                        backgroundColor=\"var(--input-background-color)\"\n                      />\n                    </Link>\n                  </div>\n                )\n              })}\n            </Masonry>\n            {postsSize <= this.postsToShow ||\n              (!this.state.showingMore && (\n                <button\n                  type=\"button\"\n                  data-testid=\"load-more\"\n                  className={style.loadMore}\n                  onClick={() => {\n                    this.setState({\n                      postsToShow: this.state.postsToShow + 20,\n                      showingMore: true,\n                    })\n                  }}\n                >\n                  Load more\n                </button>\n              ))}\n          </div>\n        </main>\n      </Layout>\n    )\n  }\n}\n\nGallery.propTypes = {\n  data: PropTypes.object.isRequired,\n}\n\nexport const pageQuery = graphql`\n  query ProcreatePaintingsQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    file(relativePath: { eq: \"procreate-paintings-feature.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 1100, quality: 75) {\n          ...GatsbyImageSharpFluid_noBase64\n        }\n        fixed(width: 1100, quality: 75) {\n          src\n          height\n          width\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { in: \"procreate-paintings\" } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            path\n            image {\n              childImageSharp {\n                fluid(maxHeight: 400, quality: 75) {\n                  ...GatsbyImageSharpFluid_noBase64\n                }\n              }\n            }\n            thumbnail {\n              childImageSharp {\n                fluid(maxHeight: 400, quality: 75) {\n                  ...GatsbyImageSharpFluid_noBase64\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Gallery\n"],"sourceRoot":""}